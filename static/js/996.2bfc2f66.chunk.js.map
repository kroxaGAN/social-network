{"version":3,"file":"static/js/996.2bfc2f66.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?dc1e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__71Zd0\",\"dialogItems\":\"Dialogs_dialogItems__zDeXJ\",\"dialog\":\"Dialogs_dialog__ewF31\",\"active\":\"Dialogs_active__lgLNa\",\"messages\":\"Dialogs_messages__IhjJD\",\"message\":\"Dialogs_message__Q1qTO\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType={\r\n    name:string,\r\n    id:number,\r\n    avatar:string\r\n}\r\n\r\n\r\nexport const DialogItem = (props:DialogPropsType) => {\r\n    let path=`/dialogs/${props.id}`\r\n    return <div className={`${s.dialog}`}>\r\n        <NavLink to={path} activeClassName={s.active}>\r\n            {<img className={s.dialog} src={props.avatar} alt=\"ava\"/>}\r\n            {props.name}\r\n        </NavLink>\r\n        </div>\r\n\r\n}\r\n","import s from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType={\r\n    message:string\r\n}\r\n\r\nexport const Message=(props:MessagePropsType)=>{\r\n    return <div className={s.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\n","import s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport { DialogType, MessageType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype DialogsPropsType = {\r\n    // addNewMessage:(text:string)=>void,\r\n    // newMessageADD:(text:string)=>void,\r\n    // addNewMessageHandler:()=>void,\r\n    newDialogText:string,\r\n    dialogs:DialogType[],\r\n    messages:MessageType[],\r\n    isAuth:boolean,\r\n    addMessageActionCreator:(text:string)=>void\r\n}\r\ntype FormikErrorType = {\r\n    inputText?: string\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let dialogsElement = props.dialogs.map((d) =>\r\n        <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>\r\n    )\r\n    let messagesElement = props.messages.map((m) =>\r\n        <Message key={m.id} message={m.message}/>\r\n    )\r\n    // let newMessageTextarea=React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n    if (!props.isAuth){\r\n        return  <Redirect to={\"/login\"}/>\r\n    }\r\n    const putNewMessage=(message:string)=>{\r\n        // props.newMessageADD(message)\r\n        props.addMessageActionCreator(message)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                <h3>Dialogs</h3>\r\n                {dialogsElement}\r\n            </div>\r\n            <div>\r\n                <h3>Messages</h3>\r\n                <div className={s.messages}>\r\n                    {messagesElement}\r\n                    {/*<div>*/}\r\n                    {/*    <textarea*/}\r\n                    {/*        ref={newMessageTextarea}*/}\r\n                    {/*        value={props.newDialogText}*/}\r\n                    {/*        onChange={addNewMessage}*/}\r\n                    {/*    />*/}\r\n                    {/*</div>*/}\r\n                    {/*<button onClick={addNewMessageHandler}>Add message</button>*/}\r\n                    <AddMessageForm putNewMessage={putNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm=(props:{putNewMessage:(message:string)=>void})=>{\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            inputText: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.inputText) {\r\n                errors.inputText = 'Required';\r\n            } else if (values.inputText.length >10 ) {\r\n                errors.inputText = 'Must be 10 characters or less';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.putNewMessage(values.inputText)\r\n           formik.resetForm()\r\n        },\r\n    });\r\n    return(\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <h3>Input message</h3>\r\n            <div>\r\n                <input\r\n                    name=\"inputText\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.inputText}\r\n                />\r\n                {formik.errors.inputText &&  formik.touched.inputText  && <div style={{color:'red'}}>{formik.errors.inputText}</div>}\r\n            </div>\r\n            <div>\r\n                <button\r\n                    type=\"submit\"\r\n                    disabled={Object.keys(formik.errors).length !== 0}\r\n                >Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppReducerType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppReducerType) => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect=(Component:any)=>{\r\n    class RedirectComponent extends React.Component<any, any>{\r\n        render(){\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let AuthRedirectComponent=connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n\r\n    return AuthRedirectComponent\r\n}\r\n","import React from \"react\";\r\nimport {addMessageAC, addMessageActionCreator, addNewMessageTextAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppReducerType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\ntype DialogsPropsType = {\r\n    // store:StoreType\r\n}\r\n\r\nclass DialogsContainer extends React.Component<any, any> {\r\n    render() {\r\n        // if (!this.props.isAuth){return <Redirect to={'/login'}/>}\r\n        return (\r\n            <div>\r\n                <Dialogs {...this.props}\r\n                         dialogs={this.props.dialogs}\r\n                         isAuth={this.props.isAuth}\r\n                         messages={this.props.messages}\r\n                         newDialogText={this.props.newDialogText}\r\n                         addMessageActionCreator={this.props.addMessageActionCreator}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n// export const DialogsContainer = (props: DialogsPropsType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     const onAddNewMessageHandler = () => {\r\n//                         store.dispatch(addMessageAC())\r\n//                     }\r\n//                     const onAddNewMessage = (message: string) => {\r\n//                         store.dispatch(addNewMessageTextAC(message))\r\n//                     }\r\n//                     return (\r\n//                         <Dialogs\r\n//                             addNewMessage={onAddNewMessage}\r\n//                             addNewMessageHandler={onAddNewMessageHandler}\r\n//                             newDialogText={store.getState().dialogsPage.newDialogText}\r\n//                             dialogs={store.getState().dialogsPage.dialogs}\r\n//                             messages={store.getState().dialogsPage.messages}\r\n//                         />\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n// let _AuthRedirectComponent=(props:any)=>{\r\n//     if (!props.isAuth){return <Redirect to={'/login'}/>}\r\n//     return <Dialogs {...props}/>\r\n// }\r\n\r\nconst mapStateToProps = (state: AppReducerType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newDialogText: state.dialogsPage.newDialogText,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\r\n    return {\r\n        addNewMessageHandler: () => dispatch(addMessageAC()),\r\n        addNewMessage: (message: string) => {\r\n            dispatch(addNewMessageTextAC(message))\r\n        },\r\n        newMessageADD: (message: string) => {\r\n            dispatch(addMessageActionCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// export const DialogsContainer=connect (mapStateToProps,mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n// export const DialogsContainer:any=compose(connect (mapStateToProps,mapDispatchToProps),WithAuthRedirect)(Dialogs)\r\n\r\nlet dialogContainer: any = compose(\r\n    connect(mapStateToProps, {addMessageActionCreator}),\r\n    withRouter,\r\n    // WithAuthRedirect //временно коммент\r\n)(DialogsContainer)\r\nexport default dialogContainer\r\n"],"names":["DialogItem","props","path","id","className","s","to","activeClassName","src","avatar","alt","name","Message","message","Dialogs","dialogsElement","dialogs","map","d","messagesElement","messages","m","isAuth","AddMessageForm","putNewMessage","addMessageActionCreator","formik","useFormik","initialValues","inputText","validate","values","errors","length","onSubmit","resetForm","handleSubmit","type","onChange","handleChange","onBlur","handleBlur","value","touched","style","color","disabled","Object","keys","mapStateToPropsForRedirect","state","auth","DialogsContainer","this","newDialogText","React","Component","RedirectComponent","connect","WithAuthRedirect","compose","dialogsPage","withRouter"],"sourceRoot":""}