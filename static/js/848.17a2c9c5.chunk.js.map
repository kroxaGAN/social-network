{"version":3,"file":"static/js/848.17a2c9c5.chunk.js","mappings":"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","sources":["components/profile/Profile.module.css","webpack://samurai-way/./src/components/profile/ProfileInfo/ProfileInfo.module.css?4f2d","components/profile/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/profile/ProfileInfo/ProfileDataForm.module.css?caae","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/MyPosts/MyPosts.module.css?fc45","webpack://samurai-way/./src/components/profile/MyPosts/Post/Post.module.css?cf75","components/profile/MyPosts/Post/Post.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/MyPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__9K+Vy\",\"imgWrapper\":\"ProfileInfo_imgWrapper__4eBmV\",\"mainPhoto\":\"ProfileInfo_mainPhoto__THmpN\",\"contact\":\"ProfileInfo_contact__+n16a\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateUserStatus: (status:string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const EditModeSwitch=(value:boolean)=>{\r\n        setEditMode(value)\r\n        if (!value){\r\n            props.updateUserStatus(status)\r\n        }\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    return <>\r\n        <div>\r\n            {\r\n                editMode\r\n                    ? <input onChange={onStatusChange}\r\n                             onBlur={()=>EditModeSwitch(false)}\r\n                             autoFocus\r\n                             value={status}/>\r\n                    : <div>\r\n                        <span onDoubleClick={()=>EditModeSwitch(true)}>\r\n\r\n                            <div>\r\n                                <b>Status</b>:  {status || \" No status\"}\r\n                            </div>\r\n\r\n\r\n                             </span>\r\n                    </div>\r\n\r\n            }\r\n        </div>\r\n\r\n    </>\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"ProfileDataForm_error__NLIQm\",\"contacts\":\"ProfileDataForm_contacts__-alPG\"};","import {profileType} from \"../../../redux/store\";\r\nimport React from \"react\";\r\nimport {useFormik} from 'formik';\r\nimport s from \"./ProfileDataForm.module.css\";\r\n\r\nexport type ValuesProfileType = {\r\n    fullName: string;\r\n    lookingForAJobDescription: string;\r\n    lookingForAJob: boolean;\r\n    aboutMe: string;\r\n    github: string;\r\n    vk:string;\r\n    facebook: string;\r\n    instagram: string;\r\n    twitter: string;\r\n    website: string;\r\n    youtube: string;\r\n    mainLink: string;\r\n}\r\nexport const ProfileDataForm = (props: { profile: profileType, setEditMode: (editMode: boolean) => void,\r\n    saveUser: (profileData: ValuesProfileType, setStatus:()=>void) => any }) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: props.profile.fullName,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            aboutMe: \"About me\",\r\n            github: props.profile.contacts.github,\r\n            vk: props.profile.contacts.vk,\r\n            facebook: props.profile.contacts.facebook,\r\n            instagram: props.profile.contacts.instagram,\r\n            twitter: props.profile.contacts.twitter,\r\n            website: props.profile.contacts.website,\r\n            youtube: props.profile.contacts.youtube,\r\n            mainLink: props.profile.contacts.mainLink,\r\n        },\r\n        onSubmit: (values: ValuesProfileType, submitProps) => {\r\n            const profileData = {\r\n                ...values,\r\n                userId: props.profile.userId,\r\n                contacts: {\r\n                    github: values.github,\r\n                    vk: values.vk,\r\n                    facebook: values.facebook,\r\n                    instagram: values.instagram,\r\n                    twitter: values.twitter,\r\n                    website: values.website,\r\n                    youtube: values.youtube,\r\n                    mainLink: values.mainLink,\r\n                }\r\n            }\r\n            props.saveUser(profileData, submitProps.setStatus)\r\n                .then(()=>{\r\n                    props.setEditMode(false)\r\n                })\r\n                .catch(()=>{\r\n\r\n                })\r\n            // console.log(formik.status.error)\r\n            // if(formik.status){\r\n            //     console.log(formik.status.error)\r\n            // }else {props.setEditMode(false)}\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <b>Full name</b>:\r\n                    <input\r\n                        id=\"fullName\"\r\n                        name=\"fullName\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.fullName}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>:\r\n                    <input\r\n                        name=\"lookingForAJob\"\r\n                        type=\"checkbox\"\r\n                        onChange={formik.handleChange}\r\n                        checked={formik.values.lookingForAJob}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                    <input\r\n                        name=\"lookingForAJobDescription\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.lookingForAJobDescription}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <b>About me</b>:\r\n                    <input\r\n                        name=\"aboutMe\"\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.aboutMe}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>:{\r\n                    <div className={s.contacts}>\r\n                        <div>\r\n                            <b>github</b>:\r\n                            <input\r\n                                name=\"github\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.github}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>vk</b>:\r\n                            <input\r\n                                name=\"vk\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.vk}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>facebook</b>:\r\n                            <input\r\n                                name=\"facebook\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.facebook}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>instagram</b>:\r\n                            <input\r\n                                name=\"instagram\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.instagram}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>twitter</b>:\r\n                            <input\r\n                                name=\"twitter\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.twitter}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>website</b>:\r\n                            <input\r\n                                name=\"website\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.website}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>youtube</b>:\r\n                            <input\r\n                                name=\"youtube\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.youtube}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>mainLink</b>:\r\n                            <input\r\n                                name=\"mainLink\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.mainLink}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                }\r\n                </div>\r\n                <div className={s.error}>\r\n                    {formik.status && formik.status.error.map((er: any, index: any) => <p key={index}>{er}</p>)}\r\n                </div>\r\n                <button type=\"submit\">Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {profileType} from \"../../../redux/store\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\nimport defPhoto from \"../../../Isses/Images/defPhoto.png\"\r\nimport {ProfileDataForm, ValuesProfileType} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhotos: (file: any) => void\r\n    saveUser:(profileData:ValuesProfileType)=>void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode,setEditMode]=useState<boolean>(false)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            // console.log(e.currentTarget.files[0])\r\n            props.savePhotos(e.currentTarget.files[0])\r\n        }\r\n    }\r\n    return <>\r\n        <div className={s.imgWrapper}>\r\n            <img\r\n                src={'https://images.unsplash.com/photo-1574217013471-c32c6846cef7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm90b3xlbnwwfHwwfHw%3D&w=1000&q=80'}\r\n                alt={'logo'}/>\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            <div>\r\n                ava + description\r\n            </div>\r\n            <img src={props.profile.photos.large || defPhoto} alt={\"img\"} className={s.mainPhoto}/>\r\n            <div>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n\r\n            {editMode\r\n                ?<ProfileDataForm profile={props.profile} setEditMode={setEditMode} saveUser={props.saveUser}/>\r\n                :<ProfileData profile={props.profile} setEditMode={setEditMode} isOwner={props.isOwner}/>  }\r\n            <div>\r\n                {/*lookingForAJobDescription*/}\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            {/*<ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>*/}\r\n\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst ProfileData=(props:{profile:profileType,setEditMode:(editMode:boolean)=>void, isOwner:boolean})=>{\r\n    return <div>\r\n        <span>\r\n            <b>Full name</b>: {props.profile.fullName}\r\n            {props.isOwner && <button onClick={()=>{props.setEditMode(true)}}>Edit</button>}\r\n        </span>\r\n        <div>\r\n            <b>Lookig for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        <div>\r\n            {props.profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b> : {props.profile.lookingForAJobDescription}\r\n            </div>\r\n\r\n            }\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:{Object.keys(props.profile.contacts).map((key:string) => {\r\n            //@ts-ignore\r\n            return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n\r\n        {/*<input type=\"checkbox\" value={\"ищу работу\"} checked={props.profile.lookingForAJob}/>*/}\r\n\r\n\r\n    </div>\r\n}\r\n\r\nconst Contact = (props: { contactTitle: string , contactValue: string  }) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{props.contactTitle}</b>: {props.contactValue === \"\" ? '-----' : props.contactValue}\r\n        </div>\r\n    )\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__-0me1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Dz3Yo\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    countLikes:number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return <div className={s.content}>\r\n        <div>\r\n            <div>\r\n\r\n                <div className={s.item}>\r\n                    <img src={'https://trikky.ru/wp-content/blogs.dir/1/files/2020/08/17/2859972401.jpg'} alt={\"ava\"}/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>{props.countLikes}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {memo} from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport { PostType} from \"../../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype MyPostsProps={\r\n    posts:PostType[],\r\n    addPost:()=>void,\r\n    newPostText:string,\r\n    updateNewPostText:(text:string)=>void\r\n    addNewPostAC:(post:string)=>void\r\n}\r\ntype FormikErrorType = {\r\n    newPost?: string\r\n}\r\n\r\n\r\nexport const MyPosts =memo((props:MyPostsProps) => {\r\n\r\n    let postsElements=props.posts.map(p =>\r\n        <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            countLikes={p.countLikes}\r\n        />\r\n    )\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    const addPost=()=>{\r\n        props.addPost()\r\n    }\r\n    const onPostChange=()=>{\r\n        const text=newPostElement.current?.value\r\n        if(text){\r\n            props.updateNewPostText(text)\r\n        }\r\n    }\r\n    const addNewPost=(post:string)=>{\r\n        props.addNewPostAC(post)\r\n    }\r\n    console.log(\"RENDER\")\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostForm addNewPost={addNewPost}/>\r\n            </div>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm=(props:{ addNewPost:(post:string)=>void})=>{\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: '',\r\n        },\r\n        validate: (values:any) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.newPost) {\r\n                errors.newPost = 'Required';\r\n            } else if (values.newPost.length > 10) {\r\n                errors.newPost = 'Must be 10 characters or less';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addNewPost(values.newPost)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    console.log(formik.errors)\r\n    return(\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input\r\n                    name=\"newPost\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.newPost}\r\n                />\r\n                {formik.errors.newPost &&  formik.touched.newPost  && <div style={{color:'red'}}>{formik.errors.newPost}</div>}\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\" disabled={Object.keys(formik.errors).length !== 0}>Add new post</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {addNewPostAC, addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MyPostsProps={\r\n    // store:StoreType\r\n    // posts:PostType[],\r\n    // addPost:()=>void,\r\n    // newPostText:string,\r\n    // updateNewPostText:(text:string)=>void\r\n    // dispatch:(action:ActionType)=>void\r\n}\r\n\r\n\r\n// export const _MyPostsContainer = (props:MyPostsProps) => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store)=>{\r\n//                     const onAddPost=()=>{\r\n//                         store.dispatch(addPostAC())\r\n//                     }\r\n//                     const onPostChange=(text:string)=>{\r\n//                         store.dispatch(updateNewPostTextAC(text))\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <MyPosts\r\n//                             addPost={onAddPost}\r\n//                             updateNewPostText={onPostChange}\r\n//                             posts={store.getState().profilePage.posts}\r\n//                             newPostText={store.getState().profilePage.newPostText}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//\r\n//\r\n//         </StoreContext.Consumer>\r\n//\r\n//\r\n//\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps=(state:any)=>{\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:any)=>{\r\n    return {\r\n        addPost:()=>{\r\n            dispatch(addPostAC())\r\n        },\r\n        updateNewPostText:(text:string)=>{\r\n            dispatch(updateNewPostTextAC(text))\r\n        },\r\n        addNewPostAC:(post:string)=>{\r\n            dispatch(addNewPostAC(post))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer =connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../redux/store\";\r\nimport {ValuesProfileType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePropsType = {\r\n    // profilePageState:{posts:PostType[], newPostText:string}\r\n    // dispatch:(action:ActionType)=>void\r\n    // store:StoreType\r\n    profile: profileType\r\n    status: string\r\n    isOwner: boolean\r\n    isAuth:boolean\r\n    updateUserStatus:(status:string)=>void\r\n    savePhotos:()=>void\r\n    saveUser:(profileData:ValuesProfileType)=>void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Main content\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhotos={props.savePhotos}\r\n                saveUser={props.saveUser}\r\n            />\r\n\r\n            {/*<MyPostsContainer*/}\r\n            {/*    posts={props.profilePageState.posts}*/}\r\n            {/*    newPostText={props.profilePageState.newPostText}*/}\r\n            {/*    dispatch={props.dispatch}*/}\r\n            {/*/>*/}\r\n            {props.isAuth && <MyPostsContainer/>}\r\n            {!props.isAuth && <h1>Выполни вход</h1>}\r\n            {/*<MyPostsContainer store={props.store}/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhotos, saveUser, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {AppReducerType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nclass ProfileContainer extends React.Component<any, any> {\r\n     refreshProfile(){\r\n         let userId = this.props.match.params.userId\r\n         if (userId === undefined) {\r\n             userId = this.props.authorizedUserId\r\n             if (!userId){\r\n                 this.props.history.push('/login')\r\n             }\r\n         }\r\n         this.props.getUserProfile(userId)\r\n         this.props.getUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\r\n        //     userAPI.profile(userId)\r\n        //     .then((res)=>{\r\n        //         this.props.setUserProfileAC(res.data)\r\n        //     })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n         if(this.props.match.params.userId!==prevProps.match.params.userId){\r\n             this.refreshProfile()\r\n         }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth){return <Redirect to={'/login'}/>}\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    isAuth={this.props.isAuth}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    savePhotos={this.props.savePhotos}\r\n                    saveUser={this.props.saveUser}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent=WithAuthRedirect(ProfileContainer)\r\n// let _AuthRedirectComponent=(props:any)=>{\r\n//     if (!props.isAuth){return <Redirect to={'/login'}/>}\r\n//     return <ProfileContainer {...props}/>\r\n// }\r\n\r\n\r\n// let mapStateToPropsForRedirect = (state: AppReducerType) => {\r\n//     return {\r\n//         isAuth:state.auth.isAuth\r\n//     }\r\n// }\r\n// let AuthRedirectComponentWithIsAuth=connect(mapStateToPropsForRedirect,{})(AuthRedirectComponent)\r\n\r\n\r\nlet mapStateToProps = (state: AppReducerType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status:state.profilePage.status,\r\n        isAuth:state.auth.isAuth,\r\n        authorizedUserId:state.auth.id\r\n    }\r\n}\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nlet profileContainer:any= compose(\r\n    connect(mapStateToProps, {getUserProfile,\r\n        getUserStatus,updateUserStatus,savePhotos,saveUser}),\r\n    withRouter,\r\n    // WithAuthRedirect //временно коммент\r\n)(ProfileContainer)\r\nexport default profileContainer\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","EditModeSwitch","value","updateUserStatus","useEffect","onChange","e","currentTarget","onBlur","autoFocus","onDoubleClick","ProfileDataForm","formik","useFormik","initialValues","fullName","profile","lookingForAJobDescription","lookingForAJob","aboutMe","github","contacts","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","submitProps","profileData","userId","saveUser","then","catch","handleSubmit","id","name","type","handleChange","checked","className","s","error","map","er","index","ProfileInfo","Preloader","src","alt","photos","large","defPhoto","isOwner","files","length","savePhotos","ProfileData","onClick","Object","keys","key","Contact","contactTitle","contactValue","Post","message","countLikes","MyPosts","memo","postsElements","posts","p","console","log","AddNewPostForm","addNewPost","post","addNewPostAC","newPost","validate","errors","resetForm","handleBlur","touched","style","color","disabled","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPost","addPostAC","updateNewPostText","text","updateNewPostTextAC","Profile","isAuth","ProfileContainer","this","match","params","undefined","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","withRouter"],"sourceRoot":""}