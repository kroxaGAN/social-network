{"version":3,"file":"static/js/707.c8ce130a.chunk.js","mappings":"2NACA,KCAA,EAAmC,sCAAnC,EAAsF,gCAAtF,EAAkI,+B,6BCOrHA,EAAyB,SAACC,GACnC,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,eAAKA,EAAL,KAAaC,EAAb,KAEMC,EAAe,SAACC,GAClBJ,EAAYI,GACPA,GACDP,EAAMQ,iBAAiBJ,IAW/B,OAJAK,EAAAA,EAAAA,YAAU,WACNJ,EAAUL,EAAMI,UAClB,CAACJ,EAAMI,UAEF,+BACH,yBAEQF,GACM,kBAAOQ,SAZJ,SAACC,GAClBN,EAAUM,EAAEC,cAAcL,QAYLM,OAAQ,kBAAIP,GAAe,IAC3BQ,WAAS,EACTP,MAAOH,KACd,qEACE,iBAAMW,cAAe,kBAAIT,GAAe,IAAxC,SAEMF,GAAU,uB,UCtB3BY,EAAc,SAAChB,GACxB,IAAKA,EAAMiB,QACP,OAAO,SAACC,EAAA,EAAD,IAQR,OAAO,iCACN,gBAAKC,UAAWC,EAAhB,UACI,gBACIC,IAAK,kJACLC,IAAK,YAEb,iBAAKH,UAAWC,EAAhB,+BAEI,gBAAKC,IAAKrB,EAAMiB,QAAQM,OAAOC,OAASC,EAAUH,IAAK,MAAOH,UAAWC,IACxEpB,EAAM0B,UAAW,kBAAOC,KAAM,OAAQjB,SAfrB,SAACC,GAAmC,IAAD,EAC5D,UAAIA,EAAEC,cAAcgB,aAApB,OAAI,EAAuBC,QAEvB7B,EAAM8B,WAAWnB,EAAEC,cAAcgB,MAAM,QAapC,wBAAK5B,EAAMiB,QAAQc,YACnB,4BACI,kBAAOJ,KAAK,WAAWpB,MAAO,0DAAcyB,QAAShC,EAAMiB,QAAQgB,iBADvE,8DAIA,SAAClC,EAAD,CAAwBK,OAAQJ,EAAMI,OAAQI,iBAAkBR,EAAMQ,oBAEtE,kBAAOmB,KAAM,OAAQpB,MAAOP,EAAMiB,QAAQiB,mC,UCzCtD,EAA6B,4BCA7B,GAAgB,KAAO,oBCOVC,EAAO,SAACnC,GACjB,OAAO,gBAAKmB,UAAWC,EAAAA,QAAhB,UACH,0BACI,0BAEI,iBAAKD,UAAWC,EAAAA,KAAhB,WACI,gBAAKC,IAAK,2EAA4EC,IAAK,QAC1FtB,EAAMoC,SACP,0BACI,0BAAOpC,EAAMqC,yB,UCCxBC,GAASC,EAAAA,EAAAA,OAAK,SAACvC,GAExB,IAAIwC,EAAcxC,EAAMyC,MAAMC,KAAI,SAAAC,GAAC,OAC/B,SAACR,EAAD,CAEIC,QAASO,EAAEP,QACXC,WAAYM,EAAEN,YAFTM,EAAEC,OAoBf,OADAC,QAAQC,IAAI,WAER,iBAAK3B,UAAWC,EAAhB,WACI,sCACA,0BACI,SAAC2B,EAAD,CAAgBC,WARX,SAACC,GACdjD,EAAMkD,aAAaD,QASdT,QAKPO,EAAe,SAAC/C,GAClB,IAAMmD,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAMhC,OALKD,EAAOF,QAEDE,EAAOF,QAAQzB,OAAS,KAC/B4B,EAAOH,QAAU,iCAFjBG,EAAOH,QAAU,WAIdG,GAEXC,SAAU,SAAAF,GACNxD,EAAMgD,WAAWQ,EAAOF,SACxBH,EAAOQ,eAIf,OADAd,QAAQC,IAAIK,EAAOM,SAEf,kBAAMC,SAAUP,EAAOS,aAAvB,WACI,4BACI,kBACIC,KAAK,UACLlC,KAAK,OACLjB,SAAUyC,EAAOW,aACjBjD,OAAQsC,EAAOY,WACfxD,MAAO4C,EAAOK,OAAOF,UAExBH,EAAOM,OAAOH,SAAYH,EAAOa,QAAQV,UAAY,gBAAKW,MAAO,CAACC,MAAM,OAAnB,SAA4Bf,EAAOM,OAAOH,cAGpG,0BACI,mBAAQ3B,KAAK,SAASwC,SAAgD,IAAtCC,OAAOC,KAAKlB,EAAOM,QAAQ5B,OAA3D,gC,SCrBHyC,GAAkBC,EAAAA,EAAAA,KApBT,SAACC,GACnB,MAAO,CACH/B,MAAM+B,EAAMC,YAAYhC,MACxBiC,YAAYF,EAAMC,YAAYC,gBAGb,SAACC,GACtB,MAAO,CACHC,QAAQ,WACJD,GAASE,EAAAA,EAAAA,QAEbC,kBAAkB,SAACC,GACfJ,GAASK,EAAAA,EAAAA,IAAoBD,KAEjC7B,aAAa,SAACD,GACV0B,GAASzB,EAAAA,EAAAA,IAAaD,QAKHsB,CAA4CjC,GChD9D2C,EAAU,SAACjF,GACpB,OACI,iBAAKmB,UAAWC,EAAAA,QAAhB,0BAEI,SAACJ,EAAD,CACIC,QAASjB,EAAMiB,QACfb,OAAQJ,EAAMI,OACdI,iBAAkBR,EAAMQ,iBACxBkB,QAAS1B,EAAM0B,QACfI,WAAY9B,EAAM8B,aAQrB9B,EAAMkF,SAAU,SAACZ,EAAD,KACftE,EAAMkF,SAAU,oG,mBC1BxBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA4CD,OA5CCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACD,WACI,IAAIC,EAASC,KAAKrF,MAAMsF,MAAMC,OAAOH,YACtBI,IAAXJ,KACAA,EAASC,KAAKrF,MAAMyF,mBAEhBJ,KAAKrF,MAAM0F,QAAQC,KAAK,WAGhCN,KAAKrF,MAAM4F,eAAeR,GAC1BC,KAAKrF,MAAM6F,cAAcT,KAC7B,+BACD,WACIC,KAAKS,mBAOR,gCAED,SAAmBC,EAA0BC,EAA0BC,GAC/DZ,KAAKrF,MAAMsF,MAAMC,OAAOH,SAASW,EAAUT,MAAMC,OAAOH,QACvDC,KAAKS,mBAEb,oBAED,WAEI,OACI,0BACI,SAACb,GAAD,kBACQI,KAAKrF,OADb,IAEIiB,QAASoE,KAAKrF,MAAMiB,QACpBb,OAAQiF,KAAKrF,MAAMI,OACnBsB,SAAU2D,KAAKrF,MAAMsF,MAAMC,OAAOH,OAClCF,OAAQG,KAAKrF,MAAMkF,OACnB1E,iBAAkB6E,KAAKrF,MAAMQ,iBAC7BsB,WAAYuD,KAAKrF,MAAM8B,oBAKtC,EA5CCqD,CAAyBe,EAAAA,WAgF/B,GAN0BC,EAAAA,EAAAA,KACtB5B,EAAAA,EAAAA,KAbkB,SAACC,GACnB,MAAO,CACHvD,QAASuD,EAAMC,YAAYxD,QAC3Bb,OAAOoE,EAAMC,YAAYrE,OACzB8E,OAAOV,EAAM4B,KAAKlB,OAClBO,iBAAiBjB,EAAM4B,KAAKxD,MAQP,CAACgD,eAAAA,EAAAA,GACtBC,cAAAA,EAAAA,GAAcrF,iBAAAA,EAAAA,GAAiBsB,WAAAA,EAAAA,KACnCuE,EAAAA,GAHsBF,CAKxBhB","sources":["components/profile/Profile.module.css","webpack://samurai-way/./src/components/profile/ProfileInfo/ProfileInfo.module.css?4f2d","components/profile/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/MyPosts/MyPosts.module.css?fc45","webpack://samurai-way/./src/components/profile/MyPosts/Post/Post.module.css?cf75","components/profile/MyPosts/Post/Post.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/MyPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__9K+Vy\",\"imgWrapper\":\"ProfileInfo_imgWrapper__4eBmV\",\"mainPhoto\":\"ProfileInfo_mainPhoto__THmpN\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateUserStatus: (status:string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const EditModeSwitch=(value:boolean)=>{\r\n        setEditMode(value)\r\n        if (!value){\r\n            props.updateUserStatus(status)\r\n        }\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    return <>\r\n        <div>\r\n            {\r\n                editMode\r\n                    ? <input onChange={onStatusChange}\r\n                             onBlur={()=>EditModeSwitch(false)}\r\n                             autoFocus\r\n                             value={status}/>\r\n                    : <div>{`Статус: `}\r\n                        <span onDoubleClick={()=>EditModeSwitch(true)}>\r\n\r\n                             {status || \" No status\"}\r\n\r\n                             </span>\r\n                    </div>\r\n\r\n            }\r\n        </div>\r\n\r\n    </>\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {profileType} from \"../../../redux/store\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\nimport defPhoto from \"../../../Isses/Images/defPhoto.png\"\r\n\r\ntype ProfileInfoPropsType={\r\n    profile:profileType\r\n    status:string\r\n    updateUserStatus:(status:string)=>void\r\n    isOwner: boolean\r\n    savePhotos:(file:any)=>void\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfoPropsType) => {\r\n    if (!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected=(e:ChangeEvent<HTMLInputElement>)=>{\r\n     if (e.currentTarget.files?.length){\r\n         // console.log(e.currentTarget.files[0])\r\n         props.savePhotos(e.currentTarget.files[0])\r\n     }\r\n    }\r\n       return <>\r\n        <div className={s.imgWrapper}>\r\n            <img\r\n                src={'https://images.unsplash.com/photo-1574217013471-c32c6846cef7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm90b3xlbnwwfHwwfHw%3D&w=1000&q=80'}\r\n                alt={'logo'}/>\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            ava + description\r\n            <img src={props.profile.photos.large || defPhoto} alt={\"img\"} className={s.mainPhoto}/>\r\n            {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            <h3>{props.profile.fullName}</h3>\r\n            <div>\r\n                <input type=\"checkbox\" value={\"ищу работу\"} checked={props.profile.lookingForAJob}/>\r\n                    ищу работу\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            {/*<ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>*/}\r\n            <input type={\"text\"} value={props.profile.lookingForAJobDescription}/>\r\n\r\n        </div>\r\n    </>\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__-0me1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Dz3Yo\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    countLikes:number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return <div className={s.content}>\r\n        <div>\r\n            <div>\r\n\r\n                <div className={s.item}>\r\n                    <img src={'https://trikky.ru/wp-content/blogs.dir/1/files/2020/08/17/2859972401.jpg'} alt={\"ava\"}/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>{props.countLikes}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {memo} from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport { PostType} from \"../../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype MyPostsProps={\r\n    posts:PostType[],\r\n    addPost:()=>void,\r\n    newPostText:string,\r\n    updateNewPostText:(text:string)=>void\r\n    addNewPostAC:(post:string)=>void\r\n}\r\ntype FormikErrorType = {\r\n    newPost?: string\r\n}\r\n\r\n\r\nexport const MyPosts =memo((props:MyPostsProps) => {\r\n\r\n    let postsElements=props.posts.map(p =>\r\n        <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            countLikes={p.countLikes}\r\n        />\r\n    )\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    const addPost=()=>{\r\n        props.addPost()\r\n    }\r\n    const onPostChange=()=>{\r\n        const text=newPostElement.current?.value\r\n        if(text){\r\n            props.updateNewPostText(text)\r\n        }\r\n    }\r\n    const addNewPost=(post:string)=>{\r\n        props.addNewPostAC(post)\r\n    }\r\n    console.log(\"RENDER\")\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostForm addNewPost={addNewPost}/>\r\n            </div>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm=(props:{ addNewPost:(post:string)=>void})=>{\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: '',\r\n        },\r\n        validate: (values:any) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.newPost) {\r\n                errors.newPost = 'Required';\r\n            } else if (values.newPost.length > 10) {\r\n                errors.newPost = 'Must be 10 characters or less';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addNewPost(values.newPost)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    console.log(formik.errors)\r\n    return(\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input\r\n                    name=\"newPost\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.newPost}\r\n                />\r\n                {formik.errors.newPost &&  formik.touched.newPost  && <div style={{color:'red'}}>{formik.errors.newPost}</div>}\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\" disabled={Object.keys(formik.errors).length !== 0}>Add new post</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {addNewPostAC, addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MyPostsProps={\r\n    // store:StoreType\r\n    // posts:PostType[],\r\n    // addPost:()=>void,\r\n    // newPostText:string,\r\n    // updateNewPostText:(text:string)=>void\r\n    // dispatch:(action:ActionType)=>void\r\n}\r\n\r\n\r\n// export const _MyPostsContainer = (props:MyPostsProps) => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store)=>{\r\n//                     const onAddPost=()=>{\r\n//                         store.dispatch(addPostAC())\r\n//                     }\r\n//                     const onPostChange=(text:string)=>{\r\n//                         store.dispatch(updateNewPostTextAC(text))\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <MyPosts\r\n//                             addPost={onAddPost}\r\n//                             updateNewPostText={onPostChange}\r\n//                             posts={store.getState().profilePage.posts}\r\n//                             newPostText={store.getState().profilePage.newPostText}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//\r\n//\r\n//         </StoreContext.Consumer>\r\n//\r\n//\r\n//\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps=(state:any)=>{\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:any)=>{\r\n    return {\r\n        addPost:()=>{\r\n            dispatch(addPostAC())\r\n        },\r\n        updateNewPostText:(text:string)=>{\r\n            dispatch(updateNewPostTextAC(text))\r\n        },\r\n        addNewPostAC:(post:string)=>{\r\n            dispatch(addNewPostAC(post))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer =connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../redux/store\";\r\n\r\ntype ProfilePropsType = {\r\n    // profilePageState:{posts:PostType[], newPostText:string}\r\n    // dispatch:(action:ActionType)=>void\r\n    // store:StoreType\r\n    profile: profileType\r\n    status: string\r\n    isOwner: boolean\r\n    isAuth:boolean\r\n    updateUserStatus:(status:string)=>void\r\n    savePhotos:()=>void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Main content\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhotos={props.savePhotos}\r\n            />\r\n\r\n            {/*<MyPostsContainer*/}\r\n            {/*    posts={props.profilePageState.posts}*/}\r\n            {/*    newPostText={props.profilePageState.newPostText}*/}\r\n            {/*    dispatch={props.dispatch}*/}\r\n            {/*/>*/}\r\n            {props.isAuth && <MyPostsContainer/>}\r\n            {!props.isAuth && <h1>Выполни вход</h1>}\r\n            {/*<MyPostsContainer store={props.store}/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhotos, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {AppReducerType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nclass ProfileContainer extends React.Component<any, any> {\r\n     refreshProfile(){\r\n         let userId = this.props.match.params.userId\r\n         if (userId === undefined) {\r\n             userId = this.props.authorizedUserId\r\n             if (!userId){\r\n                 this.props.history.push('/login')\r\n             }\r\n         }\r\n         this.props.getUserProfile(userId)\r\n         this.props.getUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\r\n        //     userAPI.profile(userId)\r\n        //     .then((res)=>{\r\n        //         this.props.setUserProfileAC(res.data)\r\n        //     })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n         if(this.props.match.params.userId!==prevProps.match.params.userId){\r\n             this.refreshProfile()\r\n         }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth){return <Redirect to={'/login'}/>}\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    isAuth={this.props.isAuth}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    savePhotos={this.props.savePhotos}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent=WithAuthRedirect(ProfileContainer)\r\n// let _AuthRedirectComponent=(props:any)=>{\r\n//     if (!props.isAuth){return <Redirect to={'/login'}/>}\r\n//     return <ProfileContainer {...props}/>\r\n// }\r\n\r\n\r\n// let mapStateToPropsForRedirect = (state: AppReducerType) => {\r\n//     return {\r\n//         isAuth:state.auth.isAuth\r\n//     }\r\n// }\r\n// let AuthRedirectComponentWithIsAuth=connect(mapStateToPropsForRedirect,{})(AuthRedirectComponent)\r\n\r\n\r\nlet mapStateToProps = (state: AppReducerType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status:state.profilePage.status,\r\n        isAuth:state.auth.isAuth,\r\n        authorizedUserId:state.auth.id\r\n    }\r\n}\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nlet profileContainer:any= compose(\r\n    connect(mapStateToProps, {getUserProfile,\r\n        getUserStatus,updateUserStatus,savePhotos}),\r\n    withRouter,\r\n    // WithAuthRedirect //временно коммент\r\n)(ProfileContainer)\r\nexport default profileContainer\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","EditModeSwitch","value","updateUserStatus","useEffect","onChange","e","currentTarget","onBlur","autoFocus","onDoubleClick","ProfileInfo","profile","Preloader","className","s","src","alt","photos","large","defPhoto","isOwner","type","files","length","savePhotos","fullName","checked","lookingForAJob","lookingForAJobDescription","Post","message","countLikes","MyPosts","memo","postsElements","posts","map","p","id","console","log","AddNewPostForm","addNewPost","post","addNewPostAC","formik","useFormik","initialValues","newPost","validate","values","errors","onSubmit","resetForm","handleSubmit","name","handleChange","handleBlur","touched","style","color","disabled","Object","keys","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPost","addPostAC","updateNewPostText","text","updateNewPostTextAC","Profile","isAuth","ProfileContainer","userId","this","match","params","undefined","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","withRouter"],"sourceRoot":""}